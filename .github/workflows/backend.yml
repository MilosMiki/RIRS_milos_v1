# Ime pipeline-a za backend
name: Backend CI

# Dogodki, ki sprožijo workflow (push in pull request na glavno vejo)
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job za gradnjo backenda
  build-backend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code  # Kloniranje repozitorija
      uses: actions/checkout@v3

    - name: Setup Node.js  # Namestitev Node.js okolja
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Cache node_modules  # Caching odvisnosti
      uses: actions/cache@v3
      with:
        path: backend/node_modules  # Pot do mape node_modules
        key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}  # Ključ za cache
        restore-keys: |
          ${{ runner.os }}-backend-
      # ⚠️ Caching:
      # - Če cache obstaja (cache hit), se node_modules obnovi, preden se zažene npm install.
      # - Če cache ne obstaja (cache miss), npm install ponovno ustvari mapo node_modules.

    - name: Install dependencies  # Namestitev odvisnosti
      run: |
        cd backend
        npm ci

    - name: Upload backend artifacts  # Naložitev artefaktov za backend
      uses: actions/upload-artifact@v4
      with:
        name: backend-build  # Ime artefakta
        path: |
          backend/  
          backend/node_modules/  
        # Pot do celotne kode
        # Nameščene odvisnosti

  # Job za testiranje backenda
  test-backend:
    needs: build-backend  # Testiranje se izvede po uspešni gradnji
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code  # Kloniranje repozitorija
      uses: actions/checkout@v3

    - name: Setup Node.js  # Namestitev Node.js okolja
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Cache node_modules  # Caching odvisnosti
      uses: actions/cache@v3
      with:
        path: backend/node_modules  # Pot do mape node_modules
        key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}  # Ključ za cache
        restore-keys: |
          ${{ runner.os }}-backend-

    - name: Install dependencies  # Namestitev odvisnosti
      run: |
        cd backend
        npm install
      # ⚠️ Cache hit:
      # - Če je cache hit, npm install preveri obstoječe odvisnosti in ne namešča ničesar dodatnega.
      # - Če je cache miss, npm install ponovno ustvari mapo node_modules.

    - name: Run tests with coverage  # Izvajanje testov s pokritostjo
      run: |
        echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> backend/.env
        echo "FIREBASE_PRIVATE_KEY_ID=${{ secrets.FIREBASE_PRIVATE_KEY_ID }}" >> backend/.env
        echo "FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }}" >> backend/.env
        echo "FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }}" >> backend/.env
        echo "FIREBASE_CLIENT_ID=${{ secrets.FIREBASE_CLIENT_ID }}" >> backend/.env
        echo "FIREBASE_AUTH_URI=${{ secrets.FIREBASE_AUTH_URI }}" >> backend/.env
        echo "FIREBASE_TOKEN_URI=${{ secrets.FIREBASE_TOKEN_URI }}" >> backend/.env
        echo "FIREBASE_AUTH_PROVIDER_CERT_URL=${{ secrets.FIREBASE_AUTH_PROVIDER_CERT_URL }}" >> backend/.env
        echo "FIREBASE_CLIENT_CERT_URL=${{ secrets.FIREBASE_CLIENT_CERT_URL }}" >> backend/.env
        echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}" >> backend/.env
        echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> backend/.env
        echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> backend/.env
        cd backend
        npm run test:ci

    - name: Upload coverage report  # Naložitev poročila o pokritosti kode
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage  # Ime artefakta
        path: backend/coverage/  # Pot do poročila o pokritosti kode

  # Gradnja Docker slike in nalaganje na Docker Hub - Development
  dockerize-and-push-dev:
    needs: test-backend
    runs-on: ubuntu-latest
    environment: Development
    if: github.ref == 'refs/heads/main' 

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker

    - name: Build and Push Docker Image
      run: |
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/backend:dev ./backend
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/backend:dev

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy backend-service \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/backend:dev \
          --region europe-west3 \
          --allow-unauthenticated \
          --set-env-vars FIREBASE_PRIVATE_KEY="${{ secrets.FIREBASE_PRIVATE_KEY }}"
